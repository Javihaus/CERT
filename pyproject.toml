[build-system]
requires = ["setuptools>=68.0.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "cert-sdk"
version = "0.1.0"
description = "Production observability for multi-agent LLM systems"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Javier MarÃ­n", email = "javier@jmarin.info"}
]
keywords = ["observability", "multi-agent", "llm", "production", "coordination"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
]

dependencies = [
    "numpy>=1.24.0",
    "scipy>=1.11.0",
    "pydantic>=2.0.0",
    "aiohttp>=3.9.0",
    "tenacity>=8.2.0",
]

[project.optional-dependencies]
# Core provider dependencies (optional - install only what you need)
openai = ["openai>=1.0.0"]
anthropic = ["anthropic>=0.7.0"]
google = ["google-generativeai>=0.3.0"]

# Semantic analysis (required for full CERT functionality)
embeddings = ["sentence-transformers>=2.2.0"]

# Framework integrations (optional - install only what you use)
langchain = ["langchain>=0.1.0", "langgraph>=0.0.20"]
crewai = ["crewai>=0.1.0"]
autogen = ["pyautogen>=0.2.0"]

# Visualization and monitoring
dashboard = [
    "streamlit>=1.28.0",
    "pandas>=2.0.0",
    "plotly>=5.17.0",
]
prometheus = ["prometheus-client>=0.19.0"]

# All providers
all-providers = [
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "google-generativeai>=0.3.0",
]

# All integrations
all-integrations = [
    "langchain>=0.1.0",
    "langgraph>=0.0.20",
    "crewai>=0.1.0",
    "pyautogen>=0.2.0",
]

# Complete installation
all = [
    "sentence-transformers>=2.2.0",
    "openai>=1.0.0",
    "anthropic>=0.7.0",
    "google-generativeai>=0.3.0",
    "langchain>=0.1.0",
    "langgraph>=0.0.20",
    "crewai>=0.1.0",
    "pyautogen>=0.2.0",
    "streamlit>=1.28.0",
    "prometheus-client>=0.19.0",
    "pandas>=2.0.0",
    "plotly>=5.17.0",
]

# Development dependencies
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.5.0",
    "types-requests>=2.31.0",
]

[project.urls]
Homepage = "https://github.com/Javihaus/CERT"
Documentation = "https://cert-sdk.readthedocs.io"
Repository = "https://github.com/Javihaus/CERT"
Issues = "https://github.com/Javihaus/CERT/issues"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311']

[tool.ruff]
line-length = 100
target-version = "py39"
select = [
    "E",   # pycodestyle errors
    "F",   # pyflakes
    "W",   # pycodestyle warnings
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "ANN", # flake8-annotations
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "DTZ", # flake8-datetimez
    "T10", # flake8-debugger
    "ISC", # flake8-implicit-str-concat
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "PD",  # pandas-vet
    "PL",  # pylint
    "RUF", # ruff-specific rules
]
ignore = [
    "ANN101", # Missing type annotation for self
    "ANN102", # Missing type annotation for cls
    "PLR0913", # Too many arguments
    "PLR2004", # Magic value used in comparison
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=cert --cov-report=html --cov-report=term-missing"
